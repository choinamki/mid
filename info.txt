ps -ef | grep a.out
getpid() # unistd.h
kill -? pid

main() 
{ 
    struct sigaction act;

   
    act.sa_handler = SIG_IGN;          #sig ignore
    
    sigemptyset(&act.sa_mask);                 #sig not ignore

    act.sa_flags = 0;                 #sig option not setting

    sigaction(SIGINT, &act, NULL);          #act setting

    while(1) { 
       printf("Hello World\n"); 
       sleep(1); 
    } 
}



#include <stdio.h>
#include <signal.h>
#include <unistd.h>

void signalHandler(int signo);

main() 
{ 
    struct sigaction act;


    act.sa_handler = signalHandler;

    sigfillset(&act.sa_mask);
    act.sa_flags = 0;

    sigaction(SIGINT, &act, NULL);
    printf("call sigaction\n");
    while(1)
       sleep(5);
}

void signalHandler(int signo)
{
    printf("start handler\n");
    sleep(3);
    printf("end handler\n");
}

[localhost@local]#a.out
call sigaction

start handler

end handler

[1]+ Stopped                       ./a.out




#include <stdio.h>
#include <signal.h>
#include <unistd.h>

void signalHandler(int signo);

main() 
{ 
    struct sigaction act;

    act.sa_handler = signalHandler;
    sigfillset(&act.sa_mask);

    act.sa_flags = SA_NOMASK;

    sigaction(SIGINT, &act, NULL);
    printf("call sigaction\n");
    while(1)
       sleep(5);
}

void signalHandler(int signo)
{
    printf("start handler\n");
    sleep(3);
    printf("end handler\n");
}

[localhost@local]#a.out
call sigaction

start handler


[1]+ Stopped                       ./a.out




#include <stdio.h>
#include <signal.h>
#include <unistd.h>

void signalHandler(int signo);
int signal_count=0;

main() 
{ 
    struct sigaction new_act;
    struct sigaction old_act;

    new_act.sa_handler = signalHandler;

    sigemptyset(&new_act.sa_mask);
    new_act.sa_flags = 0;

    sigaction(SIGINT, &new_act, &old_act);

    while(1) { 
       printf("waiting signal\n"); 
       sleep(1);
       if (signal_count == 3)

          sigaction(SIGINT, &old_act, NULL); 
    } 
}

void signalHandler(int signo)
{
    signal_count++;
    printf("Hi! signal %d\n", signal_count);
}
